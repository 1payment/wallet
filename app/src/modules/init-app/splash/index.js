import React, { Component } from 'react';
import { View, Text, StatusBar, Image, Animated, ImageBackground } from 'react-native';
import { InitData, Remove_DB, Check_Exist_Wallet, OPEN_REALM, Remove_all_wallet, } from '../../../../db';
import { CreateETH } from '../../../../services/ETH/account.service';
import { getStorage, setStorage } from '../../../../helpers/storages';
import Setting from '../../../../settings/initApp';
import ListToken from '../../../../helpers/constant/listToken';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import { GetListToken, Func_Settings } from '../../../../redux/rootActions/easyMode'
import ImageApp from '../../../../helpers/constant/image'
import Svg, { Path, Defs, Stop, LinearGradient, Anima } from 'react-native-svg';

class Splash extends Component {
    constructor(props) {
        super(props);
        this.AnimatedValue = new Animated.Value(1)
        this.state = {
            height: 80,
            width: 183
        }

        this.AnimatedValue.addListener((callBack) => {
            this.setState({ height: this.state.height * 1.1, width: this.state.width * 1.1 })
        })
    }

    componentWillUnmount() {
        this.AnimatedValue.removeAllListeners()
    }

    componentDidMount() {



        // Remove_all_wallet().then(ss => {
        //     console.log('sss', ss)
        // }).catch(e => console.log(e))
        // Remove_DB().then(console.log).catch(console.log)

        setTimeout(() => {
            Animated.timing(this.AnimatedValue, {
                toValue: 200,
                duration: 1000
            }).start(() => {
                try {
                    getStorage('setting').then(set => {
                        if (set) {
                            var set = JSON.parse(set)
                            Setting.push_list_token = set.push_list_token;
                            Setting.mode_secure = set.mode_secure;
                            Setting.first_open = set.first_open;
                            Setting.ez_turn_on_passcode = set.ez_turn_on_passcode;
                            Setting.ez_turn_on_fingerprint = set.ez_turn_on_fingerprint;
                            // Setting.type_network = set.type_network;
                            Setting.testnet = set.testnet
                            this.props.Func_Settings(set)
                            OPEN_REALM()
                            if (set.mode_secure) {
                                this.InitWalletSECURE()
                            } else {
                                this.InitWalletEZ()
                            }
                        } else {
                            this.InitWalletEZ()
                        }
                    })
                } catch (error) {
                    console.log(error)
                }
            })
        }, 350)

    }

    isAuth = () => {
        this.props.navigation.navigate('InApp')
    }

    InitWalletEZ = () => {
        Check_Exist_Wallet().then(status => {
            console.log('exist wallet', status)
            StatusBar.setBarStyle('dark-content', true)
            if (!status) {
                CreateETH()
                    .then(async wallet => {
                        var ID = Math.floor(Date.now() / 1000);
                        const InitData_Object = {
                            id: ID,
                            mode: 'Easy',
                            seeds: '',
                            token: [{
                                id: ID,
                                name: 'Ethereum',
                                symbol: 'ETH',
                                network: 'ethereum',
                                address: '',
                                price: 0.0,
                                percent_change: 0.0,
                                icon: '',
                                decimals: 18,
                                total_balance: 0,
                                id_market: 1027,
                                account: [{
                                    id: ID,
                                    name: 'Account 1',
                                    token_type: 'ethereum',
                                    address: wallet.address,
                                    private_key: wallet.privateKey,
                                    balance: 0,
                                    time: new Date()
                                }]
                            }]
                        }
                        await InitData(InitData_Object)
                            .then(() => {
                                Setting.first_open = true;
                                setStorage('list_token', JSON.stringify(ListToken)).then(() => {
                                    Setting.push_list_token = true;
                                    setStorage('setting', JSON.stringify(Setting)).then(() => {
                                        this.props.Func_Settings(Setting)
                                        this.props.GetListToken()
                                        this.props.navigation.navigate('InApp')
                                    })
                                })
                            })
                            .catch(e => console.log('ssss', e))

                    }).catch(e => console.log)
            } else {
                this.props.GetListToken()
                if (this.props.SETTINGS.ez_turn_on_passcode == true) {
                    this.props.navigation.navigate('Password', {
                        payload: {
                            canBack: false,
                            isAuth: this.isAuth
                        }
                    })
                } else {
                    this.props.navigation.navigate('InApp')
                }

            }
        }).catch(console.log)
    }

    InitWalletSECURE = () => {
        Check_Exist_Wallet().then(status => {
            StatusBar.setBarStyle('light-content', true)
            if (!status) {
                this.props.navigation.navigate('InitSecure')
            } else {
                this.props.GetListToken();
                Setting.ez_turn_on_passcode = true;
                Setting.ez_turn_on_fingerprint = false;
                Setting.testnet = false;
                setStorage('setting', JSON.stringify(Setting)).then(() => {
                    this.props.Func_Settings(Setting)
                })
                if (this.props.SETTINGS.ez_turn_on_passcode == true) {
                    this.props.navigation.navigate('Password', {
                        payload: {
                            canBack: false,
                            isAuth: this.isAuth
                        }
                    })
                } else {
                    this.props.navigation.navigate('InApp')
                }
            }
        }).catch(err => console.log(err))
    }



    render() {
        const animateStyle = {
            transform: [{ scale: this.AnimatedValue }]
        }
        return (
            <Animated.View style={[[animateStyle], { flex: 1 }]} >
                {/* <Animated.Image source={ImageApp.splash} style={[{ flex: 1 }, [animateStyle]]} /> */}
                < ImageBackground source={ImageApp.bg_splash} style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
                    <Svg width={this.state.width.toString()} height={this.state.height.toString()} viewBox="0 0 183 80">
                        <Path d="M128.053 58.6996L122.927 70.8884H119.923L119.198 62.0643L115.361 70.8884H112.376L111.513 58.6996H114.156L114.344 68.1798L118.438 58.6996H121.124L121.891 68.1453L125.413 58.6996H128.053ZM135.227 61.7689C135.739 62.1338 136.089 62.6845 136.201 63.3035L136.585 61.3162H139.002L137.31 70.8807H134.893L135.254 68.878C134.901 69.5149 134.382 70.045 133.754 70.4127C133.096 70.803 132.343 71.0035 131.578 70.992C131.106 71.017 130.633 70.9405 130.192 70.7678C129.752 70.5951 129.353 70.3301 129.023 69.9906C128.365 69.2188 128.03 68.222 128.091 67.2091C128.09 66.7639 128.13 66.3196 128.21 65.8817C128.359 64.9866 128.695 64.133 129.196 63.3764C129.644 62.6967 130.251 62.1369 130.965 61.7458C131.652 61.3757 132.421 61.1831 133.201 61.1857C133.922 61.1567 134.632 61.3613 135.227 61.7689ZM131.713 64.0708C131.138 64.6087 130.767 65.3282 130.661 66.108C130.625 66.3302 130.602 66.5545 130.592 66.7794C130.577 67.0598 130.618 67.3405 130.715 67.6043C130.811 67.8681 130.96 68.1096 131.153 68.3141C131.359 68.5032 131.601 68.6494 131.864 68.7443C132.128 68.8391 132.408 68.8807 132.687 68.8665C133.411 68.8685 134.108 68.5941 134.636 68.0992C135.215 67.5731 135.593 66.8626 135.707 66.0889C135.744 65.872 135.768 65.6528 135.776 65.4328C135.798 65.1497 135.759 64.8651 135.661 64.5985C135.563 64.3318 135.409 64.0894 135.209 63.8877C135.009 63.686 134.768 63.5297 134.503 63.4296C134.237 63.3294 133.953 63.2877 133.669 63.3073C132.944 63.3039 132.244 63.5769 131.713 64.0708ZM144.197 58.1126L141.949 70.8884H139.512L141.757 58.1126H144.197ZM148.801 58.1126L146.553 70.8884H144.116L146.361 58.1126H148.801ZM157.625 62.1871C157.98 62.5224 158.259 62.9304 158.442 63.3833C158.626 63.8361 158.709 64.3232 158.688 64.8113C158.682 65.1238 158.652 65.4354 158.599 65.7436C158.548 66.0255 158.474 66.3027 158.377 66.5723H151.325C151.298 66.7551 151.287 66.9399 151.291 67.1247C151.267 67.3924 151.302 67.662 151.391 67.9154C151.48 68.1688 151.623 68.4002 151.809 68.5941C152.189 68.9165 152.677 69.0824 153.174 69.0584C153.701 69.0704 154.218 68.9233 154.659 68.6363C155.073 68.3702 155.392 67.981 155.572 67.5237H158.147C157.774 68.5489 157.088 69.4308 156.186 70.0444C155.234 70.6969 154.102 71.035 152.948 71.0112C151.882 71.0666 150.837 70.6999 150.04 69.9906C149.671 69.6216 149.384 69.1784 149.198 68.6904C149.012 68.2024 148.932 67.6806 148.962 67.1593C148.964 66.7657 148.999 66.3731 149.065 65.9853C149.213 65.0651 149.577 64.1933 150.128 63.4416C150.645 62.7359 151.326 62.167 152.112 61.7842C152.909 61.3949 153.787 61.1965 154.675 61.2049C155.74 61.1429 156.789 61.4948 157.602 62.1871H157.625ZM156.228 64.8381C156.246 64.596 156.208 64.3529 156.115 64.1284C156.022 63.904 155.879 63.7042 155.695 63.5452C155.311 63.2475 154.834 63.094 154.348 63.1117C153.703 63.1044 153.075 63.3183 152.568 63.7178C152.021 64.1689 151.649 64.7974 151.517 65.4942H156.144C156.195 65.279 156.223 65.0592 156.228 64.8381ZM162.751 67.5506C162.725 67.6871 162.713 67.826 162.716 67.9649C162.703 68.0844 162.718 68.2053 162.76 68.3179C162.802 68.4305 162.869 68.5317 162.958 68.6133C163.198 68.753 163.475 68.8159 163.752 68.7936H164.7L164.316 70.8807H163.05C162.312 70.9288 161.58 70.7349 160.963 70.3283C160.479 69.96 160.238 69.3563 160.238 68.5174C160.24 68.1811 160.275 67.8458 160.341 67.5161L161.066 63.3726H159.735L160.099 61.3162H161.427L161.841 58.9528H164.293L163.879 61.3162H165.985L165.624 63.3726H163.499L162.751 67.5506ZM92.0348 40.0423L89.9822 51.9012H80.1146L86.3183 16.4973H101.028C104.765 16.4973 107.592 17.3234 109.51 18.9757C111.429 20.628 112.394 22.8826 112.407 25.7396C112.393 26.6119 112.31 27.4818 112.158 28.3408C111.78 30.5165 110.897 32.5732 109.579 34.345C108.212 36.1523 106.415 37.5886 104.35 38.5231C102.01 39.5813 99.4636 40.1055 96.8957 40.0577L92.0348 40.0423ZM100.667 31.2182C101.513 30.4675 102.058 29.4357 102.202 28.3139C102.255 27.9825 102.288 27.6481 102.301 27.3126C102.301 25.379 101.066 24.4121 98.5953 24.4121H94.8432L93.4428 32.2694H97.195C98.6797 32.2963 99.8345 31.9433 100.656 31.2451L100.667 31.2182ZM132.741 46.0044H120.191L117.191 51.9089H106.832L125.996 16.6354H137.306L144.059 51.9089H133.654L132.741 46.0044ZM131.59 38.5998L129.787 27.0901L123.936 38.5998H131.59ZM183 16.4973L166.238 40.6677L164.285 51.9281H154.467L156.386 40.6677L148.164 16.4973H159.42L163.257 30.0097L171.874 16.4973H183ZM39.0248 49.5264C38.792 49.5259 38.5654 49.4517 38.3774 49.3143C38.1894 49.177 38.0498 48.9836 37.9787 48.7619C37.9075 48.5403 37.9084 48.3018 37.9812 48.0807C38.0541 47.8596 38.1951 47.6673 38.3841 47.5313L57.9737 33.5355C62.7962 30.0826 69.3453 34.3028 68.1828 40.1344C67.6548 42.7829 66.2249 45.1664 64.1367 46.8789C62.0485 48.5914 59.4312 49.527 56.7306 49.5264H39.0248ZM12.4757 7.32402L0.175662 68.9126C-0.0876027 70.2336 -0.0545985 71.5965 0.272297 72.9032C0.599193 74.2099 1.21184 75.4278 2.06611 76.4692C2.92037 77.5106 3.99499 78.3496 5.21253 78.9257C6.43008 79.5018 7.76025 79.8007 9.10721 79.8008H59.1515C61.2568 79.7999 63.2967 79.0697 64.9244 77.7344C66.552 76.3991 67.6669 74.5413 68.0792 72.4768C68.3438 71.1557 68.3119 69.7924 67.9858 68.4853C67.6597 67.1781 67.0475 65.9595 66.1935 64.9176C65.3394 63.8756 64.2647 63.0362 63.047 62.4598C61.8292 61.8835 60.4988 61.5846 59.1515 61.5847H28.1443C27.0253 61.5846 25.9204 61.3352 24.9098 60.8547C23.8993 60.3743 23.0084 59.6747 22.3019 58.807C21.5954 57.9392 21.0911 56.925 20.8255 55.838C20.5599 54.751 20.5398 53.6185 20.7666 52.5227C21.2418 50.2262 22.5634 48.1925 24.4689 46.8254L43.6517 33.0713C43.8729 32.9109 44.0374 32.6843 44.1215 32.4244C44.2056 32.1644 44.2049 31.8844 44.1195 31.6249C44.0341 31.3653 43.8685 31.1396 43.6465 30.9803C43.4245 30.821 43.1576 30.7364 42.8844 30.7386H32.7866C31.8603 30.7385 30.9456 30.5328 30.1085 30.1364C29.2713 29.7401 28.5325 29.1629 27.9454 28.4466C27.3582 27.7302 26.9373 26.8925 26.7129 25.9938C26.4886 25.0952 26.4664 24.1579 26.648 23.2496C26.9311 21.8301 27.6976 20.5526 28.8169 19.6348C29.9362 18.717 31.3391 18.2156 32.7866 18.2161H70.4195C72.5255 18.216 74.5663 17.4863 76.1948 16.1509C77.8232 14.8156 78.9386 12.9572 79.3511 10.892C79.615 9.57078 79.5825 8.20743 79.2559 6.90026C78.9293 5.59308 78.3167 4.37465 77.4624 3.33279C76.6081 2.29092 75.5332 1.45158 74.3153 0.875263C73.0975 0.298946 71.7669 8.69225e-06 70.4195 5.25261e-07H21.4073C19.3011 -0.000714599 17.2599 0.728803 15.6313 2.06427C14.0027 3.39974 12.8875 5.25855 12.4757 7.32402Z" fill="url(#paint0_linear)" />
                        <Defs>
                            <LinearGradient
                                id="paint0_linear"
                                x1="-0.00465714"
                                y1="39.9004"
                                x2="182.988"
                                y2="39.9004"
                                gradientUnits="userSpaceOnUse"
                            >
                                <Stop stopColor="#FF992E" />
                                <Stop offset="0.22" stopColor="#F88138" />
                                <Stop offset="0.67" stopColor="#E74453" />
                                <Stop offset="1" stopColor="#DA1467" />
                            </LinearGradient>
                        </Defs>
                    </Svg>
                </ImageBackground >
            </Animated.View >
        );
    }
}



const mapStateToProps = state => {
    return { SETTINGS: state.Settings }
}

const mapDispatchToProps = dispatch => {
    return bindActionCreators({ GetListToken, Func_Settings }, dispatch)
}

export default connect(mapStateToProps, mapDispatchToProps)(Splash);


class AnimatedSplash extends Component {
    constructor(props) {
        super(props);
        this.state = {
            value: new Animated.Value(0),
            width: 183,
            height: 80
        }
        this.animateLogo = 0;
        this.state.value.addListener((result) => {

        })
    }

    _render_Logo = () => {
        return (
            <Svg width={this.state.width} height={this.state.height} viewBox="0 0 183 80">
                <Path d="M128.053 58.6996L122.927 70.8884H119.923L119.198 62.0643L115.361 70.8884H112.376L111.513 58.6996H114.156L114.344 68.1798L118.438 58.6996H121.124L121.891 68.1453L125.413 58.6996H128.053ZM135.227 61.7689C135.739 62.1338 136.089 62.6845 136.201 63.3035L136.585 61.3162H139.002L137.31 70.8807H134.893L135.254 68.878C134.901 69.5149 134.382 70.045 133.754 70.4127C133.096 70.803 132.343 71.0035 131.578 70.992C131.106 71.017 130.633 70.9405 130.192 70.7678C129.752 70.5951 129.353 70.3301 129.023 69.9906C128.365 69.2188 128.03 68.222 128.091 67.2091C128.09 66.7639 128.13 66.3196 128.21 65.8817C128.359 64.9866 128.695 64.133 129.196 63.3764C129.644 62.6967 130.251 62.1369 130.965 61.7458C131.652 61.3757 132.421 61.1831 133.201 61.1857C133.922 61.1567 134.632 61.3613 135.227 61.7689ZM131.713 64.0708C131.138 64.6087 130.767 65.3282 130.661 66.108C130.625 66.3302 130.602 66.5545 130.592 66.7794C130.577 67.0598 130.618 67.3405 130.715 67.6043C130.811 67.8681 130.96 68.1096 131.153 68.3141C131.359 68.5032 131.601 68.6494 131.864 68.7443C132.128 68.8391 132.408 68.8807 132.687 68.8665C133.411 68.8685 134.108 68.5941 134.636 68.0992C135.215 67.5731 135.593 66.8626 135.707 66.0889C135.744 65.872 135.768 65.6528 135.776 65.4328C135.798 65.1497 135.759 64.8651 135.661 64.5985C135.563 64.3318 135.409 64.0894 135.209 63.8877C135.009 63.686 134.768 63.5297 134.503 63.4296C134.237 63.3294 133.953 63.2877 133.669 63.3073C132.944 63.3039 132.244 63.5769 131.713 64.0708ZM144.197 58.1126L141.949 70.8884H139.512L141.757 58.1126H144.197ZM148.801 58.1126L146.553 70.8884H144.116L146.361 58.1126H148.801ZM157.625 62.1871C157.98 62.5224 158.259 62.9304 158.442 63.3833C158.626 63.8361 158.709 64.3232 158.688 64.8113C158.682 65.1238 158.652 65.4354 158.599 65.7436C158.548 66.0255 158.474 66.3027 158.377 66.5723H151.325C151.298 66.7551 151.287 66.9399 151.291 67.1247C151.267 67.3924 151.302 67.662 151.391 67.9154C151.48 68.1688 151.623 68.4002 151.809 68.5941C152.189 68.9165 152.677 69.0824 153.174 69.0584C153.701 69.0704 154.218 68.9233 154.659 68.6363C155.073 68.3702 155.392 67.981 155.572 67.5237H158.147C157.774 68.5489 157.088 69.4308 156.186 70.0444C155.234 70.6969 154.102 71.035 152.948 71.0112C151.882 71.0666 150.837 70.6999 150.04 69.9906C149.671 69.6216 149.384 69.1784 149.198 68.6904C149.012 68.2024 148.932 67.6806 148.962 67.1593C148.964 66.7657 148.999 66.3731 149.065 65.9853C149.213 65.0651 149.577 64.1933 150.128 63.4416C150.645 62.7359 151.326 62.167 152.112 61.7842C152.909 61.3949 153.787 61.1965 154.675 61.2049C155.74 61.1429 156.789 61.4948 157.602 62.1871H157.625ZM156.228 64.8381C156.246 64.596 156.208 64.3529 156.115 64.1284C156.022 63.904 155.879 63.7042 155.695 63.5452C155.311 63.2475 154.834 63.094 154.348 63.1117C153.703 63.1044 153.075 63.3183 152.568 63.7178C152.021 64.1689 151.649 64.7974 151.517 65.4942H156.144C156.195 65.279 156.223 65.0592 156.228 64.8381ZM162.751 67.5506C162.725 67.6871 162.713 67.826 162.716 67.9649C162.703 68.0844 162.718 68.2053 162.76 68.3179C162.802 68.4305 162.869 68.5317 162.958 68.6133C163.198 68.753 163.475 68.8159 163.752 68.7936H164.7L164.316 70.8807H163.05C162.312 70.9288 161.58 70.7349 160.963 70.3283C160.479 69.96 160.238 69.3563 160.238 68.5174C160.24 68.1811 160.275 67.8458 160.341 67.5161L161.066 63.3726H159.735L160.099 61.3162H161.427L161.841 58.9528H164.293L163.879 61.3162H165.985L165.624 63.3726H163.499L162.751 67.5506ZM92.0348 40.0423L89.9822 51.9012H80.1146L86.3183 16.4973H101.028C104.765 16.4973 107.592 17.3234 109.51 18.9757C111.429 20.628 112.394 22.8826 112.407 25.7396C112.393 26.6119 112.31 27.4818 112.158 28.3408C111.78 30.5165 110.897 32.5732 109.579 34.345C108.212 36.1523 106.415 37.5886 104.35 38.5231C102.01 39.5813 99.4636 40.1055 96.8957 40.0577L92.0348 40.0423ZM100.667 31.2182C101.513 30.4675 102.058 29.4357 102.202 28.3139C102.255 27.9825 102.288 27.6481 102.301 27.3126C102.301 25.379 101.066 24.4121 98.5953 24.4121H94.8432L93.4428 32.2694H97.195C98.6797 32.2963 99.8345 31.9433 100.656 31.2451L100.667 31.2182ZM132.741 46.0044H120.191L117.191 51.9089H106.832L125.996 16.6354H137.306L144.059 51.9089H133.654L132.741 46.0044ZM131.59 38.5998L129.787 27.0901L123.936 38.5998H131.59ZM183 16.4973L166.238 40.6677L164.285 51.9281H154.467L156.386 40.6677L148.164 16.4973H159.42L163.257 30.0097L171.874 16.4973H183ZM39.0248 49.5264C38.792 49.5259 38.5654 49.4517 38.3774 49.3143C38.1894 49.177 38.0498 48.9836 37.9787 48.7619C37.9075 48.5403 37.9084 48.3018 37.9812 48.0807C38.0541 47.8596 38.1951 47.6673 38.3841 47.5313L57.9737 33.5355C62.7962 30.0826 69.3453 34.3028 68.1828 40.1344C67.6548 42.7829 66.2249 45.1664 64.1367 46.8789C62.0485 48.5914 59.4312 49.527 56.7306 49.5264H39.0248ZM12.4757 7.32402L0.175662 68.9126C-0.0876027 70.2336 -0.0545985 71.5965 0.272297 72.9032C0.599193 74.2099 1.21184 75.4278 2.06611 76.4692C2.92037 77.5106 3.99499 78.3496 5.21253 78.9257C6.43008 79.5018 7.76025 79.8007 9.10721 79.8008H59.1515C61.2568 79.7999 63.2967 79.0697 64.9244 77.7344C66.552 76.3991 67.6669 74.5413 68.0792 72.4768C68.3438 71.1557 68.3119 69.7924 67.9858 68.4853C67.6597 67.1781 67.0475 65.9595 66.1935 64.9176C65.3394 63.8756 64.2647 63.0362 63.047 62.4598C61.8292 61.8835 60.4988 61.5846 59.1515 61.5847H28.1443C27.0253 61.5846 25.9204 61.3352 24.9098 60.8547C23.8993 60.3743 23.0084 59.6747 22.3019 58.807C21.5954 57.9392 21.0911 56.925 20.8255 55.838C20.5599 54.751 20.5398 53.6185 20.7666 52.5227C21.2418 50.2262 22.5634 48.1925 24.4689 46.8254L43.6517 33.0713C43.8729 32.9109 44.0374 32.6843 44.1215 32.4244C44.2056 32.1644 44.2049 31.8844 44.1195 31.6249C44.0341 31.3653 43.8685 31.1396 43.6465 30.9803C43.4245 30.821 43.1576 30.7364 42.8844 30.7386H32.7866C31.8603 30.7385 30.9456 30.5328 30.1085 30.1364C29.2713 29.7401 28.5325 29.1629 27.9454 28.4466C27.3582 27.7302 26.9373 26.8925 26.7129 25.9938C26.4886 25.0952 26.4664 24.1579 26.648 23.2496C26.9311 21.8301 27.6976 20.5526 28.8169 19.6348C29.9362 18.717 31.3391 18.2156 32.7866 18.2161H70.4195C72.5255 18.216 74.5663 17.4863 76.1948 16.1509C77.8232 14.8156 78.9386 12.9572 79.3511 10.892C79.615 9.57078 79.5825 8.20743 79.2559 6.90026C78.9293 5.59308 78.3167 4.37465 77.4624 3.33279C76.6081 2.29092 75.5332 1.45158 74.3153 0.875263C73.0975 0.298946 71.7669 8.69225e-06 70.4195 5.25261e-07H21.4073C19.3011 -0.000714599 17.2599 0.728803 15.6313 2.06427C14.0027 3.39974 12.8875 5.25855 12.4757 7.32402Z" fill="url(#paint0_linear)" />
                <Defs>
                    <LinearGradient
                        id="paint0_linear"
                        x1="-0.00465714"
                        y1="39.9004"
                        x2="182.988"
                        y2="39.9004"
                        gradientUnits="userSpaceOnUse"
                    >
                        <Stop stopColor="#FF992E" />
                        <Stop offset="0.22" stopColor="#F88138" />
                        <Stop offset="0.67" stopColor="#E74453" />
                        <Stop offset="1" stopColor="#DA1467" />
                    </LinearGradient>
                </Defs>
            </Svg>
        )
    }

    render() {
        return (
            <Animated.View style={[[animateStyle], { flex: 1 }]} >
                < ImageBackground source={ImageApp.bg_splash} style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>

                </ImageBackground >
            </Animated.View >
        )
    }
}
